# GaussianFeels Docker Compose Configuration
version: '3.8'

services:
  # Main GaussianFeels application
  gaussianfeels:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gaussianfeels-main
    restart: unless-stopped
    ports:
      - "8080:8080"  # Web interface
      - "8081:8081"  # API endpoint
      - "8082:8082"  # WebSocket
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/gaussianfeels
    volumes:
      - ./data:/app/data
      - ./outputs:/app/outputs
      - ./logs:/app/logs
      - ./checkpoints:/app/checkpoints
      - ./configs:/app/configs
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: ["python", "-m", "gaussianfeels.server", "--config", "configs/production.yaml"]

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: gaussianfeels-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # PostgreSQL for metadata storage
  postgres:
    image: postgres:15-alpine
    container_name: gaussianfeels-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=gaussianfeels
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql

  # Celery worker for background tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gaussianfeels-worker
    restart: unless-stopped
    environment:
      - CUDA_VISIBLE_DEVICES=1
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/gaussianfeels
    volumes:
      - ./data:/app/data
      - ./outputs:/app/outputs
      - ./logs:/app/logs
      - ./checkpoints:/app/checkpoints
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: ["celery", "-A", "gaussianfeels.tasks", "worker", "--loglevel=info"]

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: gaussianfeels-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: gaussianfeels-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # NGINX reverse proxy
  nginx:
    image: nginx:alpine
    container_name: gaussianfeels-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - gaussianfeels

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: gaussianfeels-network