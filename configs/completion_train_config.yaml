# Tactile-Guided Point Completion Training Configuration
# Optimized for RTX 4060 8GB VRAM with academic validation requirements

# Model Architecture Configuration
model:
  # Feature dimensions optimized for memory efficiency
  visual_dim: 512          # Point Transformer output dimension
  tactile_dim: 256         # PointNet tactile encoder output
  fusion_dim: 384          # Cross-modal fusion dimension
  latent_dim: 128          # VAE latent space dimension
  
  # Gaussian generation parameters for real-time performance
  num_coarse_gaussians: 128    # Initial coarse completion
  num_refined_gaussians: 2048  # Final detailed completion
  
  # Model architectural choices
  use_constraint_losses: true
  use_multi_scale_features: true
  enable_attention_visualization: false  # Disable for memory efficiency

# Training Configuration (8GB VRAM Optimized)
training:
  # Training schedule
  num_epochs: 100
  learning_rate: 1e-4
  weight_decay: 1e-5
  
  # Memory optimization for RTX 4060 8GB
  batch_size: 4                    # Small batch size for 8GB VRAM
  gradient_accumulation_steps: 8   # Effective batch size = 32
  mixed_precision: true            # FP16 training
  gradient_checkpointing: true     # Trade compute for memory
  max_grad_norm: 1.0              # Gradient clipping
  
  # Learning rate scheduling
  warmup_steps: 1000
  scheduler_type: "cosine"         # Cosine annealing with warmup
  min_lr_ratio: 0.01
  
  # Validation and checkpointing
  validation_frequency: 100        # Validate every 100 steps
  save_frequency: 500             # Save checkpoint every 500 steps  
  early_stopping_patience: 10     # Stop if no improvement for 10 validations
  
  # Training efficiency
  compile_model: false            # Disable torch.compile for stability
  dataloader_num_workers: 2       # Limit workers for memory
  pin_memory: false               # Disable pin memory for 8GB systems

# Dataset Configuration
datasets:
  # Primary dataset selection
  primary_dataset: "feelsight_occlusion"
  data_root: "data"
  
  # FeelSight Occlusion Dataset Configuration
  feelsight_occlusion:
    data_root: "data/feelsight_occlusion"
    output_root: "data/completion_pairs"
    
    # Occlusion complexity settings
    occlusion_ratios: [0.25, 0.5, 0.75]      # Light, medium, heavy occlusion
    max_occlusion_scenarios: 5               # Limit scenarios for memory
    preserve_contact_radius: 0.02            # 2cm around tactile contacts
    min_visible_points: 1000                 # Minimum points in partial view
    min_contact_points: 1                    # Require at least 1 tactile contact
    
    # Dataset splits for academic validation
    train_split: 0.8    # 80% for training
    val_split: 0.15     # 15% for validation  
    test_split: 0.05    # 5% for final testing
    seed: 42            # Reproducibility
  
  # Data augmentation (moderate for real-time training)
  augmentation:
    enabled: true
    rotation_range: [-30, 30]      # Degrees
    scale_range: [0.9, 1.1]        # Scale factor
    noise_std: 0.005               # Gaussian noise
    random_dropout: 0.05           # Point dropout ratio
    jitter_std: 0.01               # Position jittering

# Loss Function Configuration
losses:
  # Loss component weights (tuned for tactile-guided completion)
  chamfer_weight: 1.0              # Primary geometric accuracy
  constraint_weight: 0.5           # Tactile constraint compliance
  kl_weight: 0.1                   # VAE regularization
  normal_weight: 0.3               # Surface normal consistency
  
  # Adaptive loss weighting
  adaptive_weighting: true         # Adjust weights during training
  warmup_steps: 1000              # Steps before full constraint weight
  
  # Loss-specific parameters
  chamfer_loss:
    bidirectional: true           # Forward and backward Chamfer
    use_sqrt: true               # L1-like behavior
    outlier_threshold: 0.05      # Reject extreme outliers
  
  constraint_loss:
    smoothness_weight: 1.0
    density_weight: 0.5
    k_neighbors: 16
  
  kl_loss:
    temperature: 1.0
    spatial_weight: 1.0
    feature_weight: 0.5

# Memory Management Configuration
memory:
  # Data loading optimization
  num_workers: 2                  # Limited for 8GB systems
  pin_memory: false               # Disable for memory efficiency
  prefetch_factor: 2              # Modest prefetching
  persistent_workers: true        # Reuse worker processes
  
  # Memory monitoring
  cleanup_frequency: 300          # Memory cleanup every 5 minutes
  oom_detection: true            # Handle out-of-memory errors
  memory_profiling: false        # Disable for training speed
  
  # Dynamic optimization
  adaptive_batch_size: true      # Reduce batch size on OOM
  gradient_accumulation_adaptive: true  # Adjust accumulation steps

# Validation Configuration (Academic Rigor)
validation:
  # Evaluation metrics for academic validation
  metrics:
    - "chamfer_distance"          # Primary geometric metric
    - "f_score"                   # Surface reconstruction quality
    - "hausdorff_distance"        # Worst-case error
    - "normal_consistency"        # Surface orientation accuracy
    - "tactile_constraint_violation"  # Constraint compliance
  
  # Statistical significance testing
  significance_level: 0.05        # p < 0.05 for statistical significance
  min_samples_significance: 30    # Minimum samples for valid test
  baseline_comparison: true       # Compare against baselines
  
  # Performance validation (Real-time requirements)
  performance_targets:
    inference_time_ms: 500        # Maximum inference time
    memory_usage_gb: 6.0         # Maximum GPU memory during inference
    fps_target: 30               # Real-time performance target
  
  # Validation frequency
  detailed_validation_frequency: 10   # Detailed metrics every 10 validations
  sample_visualization_frequency: 5   # Save samples every 5 validations

# Experiment Tracking Configuration
experiment:
  # Experiment organization
  experiment_dir: "experiments"
  tensorboard_enabled: true       # Enable TensorBoard logging
  save_sample_outputs: true       # Save completion examples
  sample_frequency: 1000          # Save samples every 1000 steps
  
  # Reproducibility
  set_deterministic: true         # Enable deterministic algorithms
  cudnn_benchmark: false          # Disable for reproducibility
  
  # Checkpointing
  keep_last_n_checkpoints: 5      # Keep 5 most recent checkpoints
  save_best_model: true          # Save best validation model
  
  # Logging configuration
  log_level: "INFO"              # Logging verbosity
  log_metrics_frequency: 50      # Log training metrics every 50 steps
  log_gradients: false           # Disable gradient logging for speed

# Hardware-Specific Optimizations
hardware:
  # GPU optimization for RTX 4060
  device: "auto"                 # Auto-detect CUDA/CPU
  mixed_precision_backend: "native"  # Use PyTorch native AMP
  
  # Memory optimization strategies
  channels_last: false           # Disable channels_last for point clouds
  gradient_checkpointing_ratio: 0.5  # Checkpoint 50% of layers
  
  # Performance optimization
  compile_model: false           # Disable compilation for stability
  flash_attention: false         # Not applicable to point clouds
  cpu_offload: false            # Keep all on GPU for RTX 4060

# Baseline Comparison Configuration (Academic Validation)
baselines:
  enabled: true                  # Enable baseline comparison
  methods:
    - "vision_only"             # Vision-only completion baseline
    - "random_completion"       # Random completion baseline
    - "nearest_neighbor"        # Nearest neighbor completion
  
  # Comparison metrics
  improvement_threshold: 0.05    # Minimum 5% improvement required
  statistical_testing: true     # Test significance of improvements

# Real-time Performance Configuration
realtime:
  # Performance optimization
  enable_jit_compilation: false  # Disable for training stability
  optimize_for_inference: false  # Training mode optimization
  
  # Memory management for real-time deployment
  max_batch_size_inference: 1   # Single sample for real-time
  enable_model_quantization: false  # Disable during training
  
  # Target specifications (for validation)
  target_fps: 30                # 30 FPS real-time performance
  max_latency_ms: 33            # 33ms maximum latency
  max_memory_mb: 6000           # 6GB maximum GPU memory

# Advanced Training Features
advanced:
  # Curriculum learning (start with easier examples)
  curriculum_learning: false     # Disable for simplicity
  
  # Multi-task learning
  auxiliary_tasks: false         # Focus on primary completion task
  
  # Regularization techniques
  dropout_rate: 0.1             # General dropout rate
  weight_decay_schedule: false   # Use constant weight decay
  
  # Training stability
  gradient_clipping_type: "norm" # Gradient norm clipping
  ema_decay: 0.999              # Exponential moving average for stable training
  
  # Distributed training (not needed for single GPU)
  distributed: false
  sync_batchnorm: false